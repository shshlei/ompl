/*********************************************************************
* Software License Agreement (BSD License)
*
*  Copyright (c) 2011, Rice University
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions
*  are met:
*
*   * Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above
*     copyright notice, this list of conditions and the following
*     disclaimer in the documentation and/or other materials provided
*     with the distribution.
*   * Neither the name of the Rice University nor the names of its
*     contributors may be used to endorse or promote products derived
*     from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*********************************************************************/

/* Authors: Shi Shenglei*/

#ifndef OMPL_GEOMETRIC_PLANNERS_HSC_HSCASE_
#define OMPL_GEOMETRIC_PLANNERS_HSC_HSCASE_

#include "ompl/geometric/planners/hsc/BiHSC.h"
#include "ompl/geometric/planners/ase/BiASE.h"

namespace ompl
{
    namespace geometric
    {
        /** \brief Bidirectional Hybrid Safety Certificate */
        class HSCASE : public BiHSC, public BiASE 
        {
        public:

            HSCASE(const base::SpaceInformationPtr &si);

            ~HSCASE() override = default;

            void setup() override;

            base::PlannerStatus solve(const base::PlannerTerminationCondition &ptc) override;

            void clear() override;

        protected:

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            // general functions
            base::PlannerStatus prepareSolve(const base::PlannerTerminationCondition &ptc) override
            {
                return BiHSC::prepareSolve(ptc);
            }

            GrowState growTree(TreeData &tree, TreeGrowingInfo &tgi, Motion *rmotion, bool &checkConnection, bool &otherSide, bool optimal = false) override
            {
                return BiHSC::growTree(tree, tgi, rmotion, checkConnection, otherSide, optimal);
            }

            GrowState biasGrow(TreeData &tree, TreeGrowingInfo &tgi, Motion *&rmotion, bool optimal = false) override
            {
                return BiHSC::biasGrow(tree, tgi, rmotion, optimal);
            }

            bool isValid(const base::State *state) override
            {
                return BiHSC::isValid(state);
            }

            bool checkInterMotion(Motion *motion1, Motion *motion2, bool start) override
            {
                return BiHSC::checkInterMotion(motion1, motion2, start);
            }

            // check
            bool isValid(Motion *motion, bool start, bool add = false) override
            {
                return BiHSC::isValid(motion, start, add);
            }

            bool checkInterMotion2(Motion *smotion, Motion *gmotion, bool start) override
            {
                return BiHSC::checkInterMotion2(smotion, gmotion, start);
            }
        };
    }
}

#endif
