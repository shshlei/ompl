/*********************************************************************
* Software License Agreement (BSD License)
*
*  Copyright (c) 2008, Willow Garage, Inc.
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions
*  are met:
*
*   * Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above
*     copyright notice, this list of conditions and the following
*     disclaimer in the documentation and/or other materials provided
*     with the distribution.
*   * Neither the name of the Willow Garage nor the names of its
*     contributors may be used to endorse or promote products derived
*     from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*********************************************************************/

/* Author: Shi Shenglei */

#ifndef OMPL_GEOMETRIC_PLANNERS_LSC_LSC_
#define OMPL_GEOMETRIC_PLANNERS_LSC_LSC_

#include "ompl/geometric/planners/PlannerIncludes.h"
#include "ompl/datastructures/NearestNeighbors.h"

#include "ompl/base/SafetyCertificate.h"
#include "ompl/base/State.h"

#include <functional>
#include <vector>

namespace ompl
{
    namespace geometric
    {
        /** \brief Lazy safety certificate */
        class LSC : public base::Planner
        {
        public:
            using SafetyCertificateChecker = std::function<void(const base::State *state,  
                                                                const std::vector<base::SafetyCertificate *> &scv, 
                                                                bool &sc,
                                                                base::SafetyCertificate *&csc)>;
            using CollisionCertificateChecker = std::function<void(const base::State *state,  
                                                                const std::vector<base::SafetyCertificate *> &ocv, 
                                                                bool &osc,
                                                                base::SafetyCertificate *&csc)>;

           /** \brief Constructor */
            LSC(const base::SpaceInformationPtr &si, const SafetyCertificateChecker &safetyCertificateChecker,
                const CollisionCertificateChecker &collisionCertificateChecker, double confidence = 1.0);

            ~LSC() override;

            void setup() override;

            base::PlannerStatus solve(const base::PlannerTerminationCondition &ptc) override;

            void clear() override;

            void getPlannerData(base::PlannerData &data) const override;

            /** \brief Set the goal biasing. */
            void setGoalBias(double goalBias)
            {
                goalBias_ = goalBias;
            }

            /** \brief Get the goal bias the planner is using */
            double getGoalBias() const
            {
                return goalBias_;
            }

            /** \brief Set the range the planner is supposed to use. */
            void setRange(double distance)
            {
                maxDistance_ = distance;
            }

            /** \brief Get the range the planner is using */
            double getRange() const
            {
                return maxDistance_;
            }
			
            void setCollisionConfidence(unsigned int c)
            {
                collisionConfidence_ = c;
            }

            unsigned int getCollisionConfidence() const
            {
                return collisionConfidence_;
            }

        protected:

            class Motion
            {
            public:
                Motion() = default;

                Motion(const base::SpaceInformationPtr &si) : state(si->allocState())
                {
                }

                ~Motion() = default;

                base::State *state{nullptr};

                const base::State *root{nullptr};

                Motion *parent{nullptr};

                bool valid{false};

                bool stateValid{false};

                std::vector<Motion *> children;

                base::SafetyCertificate *sc{nullptr};

                bool scself{false};
            };

            /** \brief Compute distance between motions (actually distance between contained states) */
            double distanceFunction(const Motion *a, const Motion *b) const
            {
                return si_->distance(a->state, b->state);
            }

            double distanceFunction(const base::SafetyCertificate *a, const base::SafetyCertificate *b) const
            {
                return si_->distance(a->state, b->state);
            }

            /** \brief Free the memory allocated by this planner */
            void freeMemory();

            /** \brief Remove a motion from the tree datastructure */
            void removeMotion(Motion *motion);

            // grow
            bool isValid(const base::State *state, base::SafetyCertificate *&csc);

            bool isValidExact(const base::State *state, base::SafetyCertificate *&csc);

            // check
            bool isValid(Motion *motion);

            bool checkStartMotion(Motion *motion1, Motion *motion2, bool &stateValid);

			/** \brief A nearest-neighbors datastructure containing the free certificate */
            std::shared_ptr<NearestNeighbors<base::SafetyCertificate *>> snn_;
			
			/** \brief A nearest-neighbors datastructure containing the obstacle certificate */
            std::shared_ptr<NearestNeighbors<base::SafetyCertificate *>> onn_;

            unsigned int collisionConfidence_{5};

            SafetyCertificateChecker safetyCertificateChecker_;

            CollisionCertificateChecker collisionCertificateChecker_;

            double confidence_;

            /** \brief State sampler */
            base::StateSamplerPtr sampler_;

            /** \brief A nearest-neighbors datastructure containing the tree of motions */
            std::shared_ptr<NearestNeighbors<Motion *>> nn_;
			
            /** \brief The fraction of time the goal is picked as the state to expand towards (if such a state is
             * available) */
            double goalBias_{.05};

            /** \brief The maximum length of a motion to be added to a tree */
            double maxDistance_{0.};

            /** \brief The random number generator */
            RNG rng_;
        };
    }
}

#endif
