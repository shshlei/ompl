/*********************************************************************
* Software License Agreement (BSD License)
*
*  Copyright (c) 2011, Rice University
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions
*  are met:
*
*   * Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above
*     copyright notice, this list of conditions and the following
*     disclaimer in the documentation and/or other materials provided
*     with the distribution.
*   * Neither the name of the Rice University nor the names of its
*     contributors may be used to endorse or promote products derived
*     from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*********************************************************************/

/* Authors: Shi Shenglei*/

#ifndef OMPL_GEOMETRIC_PLANNERS_LSC_LSCAI_
#define OMPL_GEOMETRIC_PLANNERS_LSC_LSCAI_

#include "ompl/datastructures/BinaryHeap.h"
#include "ompl/datastructures/NearestNeighbors.h"
#include "ompl/geometric/planners/PlannerIncludes.h"
#include "ompl/base/samplers/AdInformedStateSampler.h"
#include "ompl/base/OptimizationObjective.h"

#include "ompl/base/SafetyCertificate.h"
#include "ompl/base/State.h"

#include "ompl/base/ProjectionEvaluator.h"
#include "ompl/datastructures/Grid.h"
#include "ompl/datastructures/PDF.h"

#include <functional>
#include <limits>
#include <vector>
#include <queue>
#include <deque>
#include <utility>
#include <list>

#include <fstream>

namespace ompl
{
    namespace geometric
    {
        /** \brief Bidirectional Optimal Rapidly-exploring Random Trees */
        class LSCAI : public base::Planner
        {
        public:
            using CollisionCertificateChecker = std::function<void(const base::State *state,  
                                                                const std::vector<base::SafetyCertificate *> &ocv, 
                                                                bool &osc,
                                                                base::SafetyCertificate *&csc)>;

            LSCAI(const base::SpaceInformationPtr &si, const CollisionCertificateChecker &collisionCertificateChecker);

            ~LSCAI() override;

            void setup() override;

            base::PlannerStatus solve(const base::PlannerTerminationCondition &ptc) override;

            void clear() override;

            void getPlannerData(base::PlannerData &data) const override;

            void setRange(double distance)
            {
                maxDistance_ = distance;
            }

            double getRange() const
            {
                return maxDistance_;
            }

            void setCollisionDistance(double distance)
            {
                maxCollisionDistance_ = distance;
            }

            double getCollisionDistance() const
            {
                return maxCollisionDistance_;
            }

            void setPenDistance(double distance)
            {
                penDistance_ = distance;
            }

            double getPenDistance() const
            {
                return penDistance_;
            }

            void setLazyNode(bool lazy)
            {
                lazyNode_ = lazy;
            }

            bool getLazyNode() const
            {
                return lazyNode_;
            }

            void setLocalRatio(double ratio)
            {
                localRatio_ = ratio;
            }

            double getLocalRatio() const
            {
                return localRatio_;
            }

            void setInformedSampling(bool informedSampling)
            {
                useInformedSampling_ = informedSampling;
            }

            bool getInformedSampling() const
            {
                return useInformedSampling_;
            }

            void setSampleRejection(bool reject)
            {
                useRejectionSampling_ = reject;
            }

            bool getSampleRejection() const
            {
                return useRejectionSampling_;
            }

            void setNumSamplingAttempts(unsigned int numAttempts)
            {
                numSampleAttempts_ = numAttempts;
            }

            unsigned int getNumSamplingAttempts() const
            {
                return numSampleAttempts_;
            }

            void setNearestK(unsigned int nearestK)
            {
                nearestK_ = nearestK;
            }

            unsigned int getNearestK() const
            {
                return nearestK_;
            }

            void setBatchSize(unsigned int batch)
            {
                batch_ = batch;
            }

            unsigned int getBatchSize() const
            {
                return batch_;
            }

        protected:

            enum StateValid
            {
                UnCkecked,
                InValid,
                Valid 
            };

            class Motion;

            struct MotionCompare
            {
                MotionCompare(base::OptimizationObjectivePtr opt) : opt_(std::move(opt))
                {
                }

                /** \brief Ordering of motions */
                inline bool operator()(const Motion *motion1, const Motion *motion2) const
                {
                    // we use a max heap, to do a min heap so the operator < returns > in order to make it a min heap
                    return opt_->isCostBetterThan(motion1->cost, motion2->cost);
                }

                /** \brief Pointer to the Optimization Objective */
                base::OptimizationObjectivePtr opt_;
            };

            /** \brief Representation of a motion */
            class Motion
            {
            public:
                Motion(const base::SpaceInformationPtr &si) : state(si->allocState())
                {
                }

                ~Motion() = default;

                /** \brief The state contained by the motion */
                base::State *state{nullptr};

                const base::State *root{nullptr};

                /** \brief The parent motion in the exploration tree */
                Motion *parent{nullptr};

                StateValid stateValid{UnCkecked};

                bool valid{false};

                bool inConnection{false};

                bool middle{false};

                /** \brief The cost up to this motion */
                base::Cost cost;

                /** \brief The incremental cost of this motion's parent to this motion (this is stored to save distance
                 * computations in the updateChildCosts() method) */
                base::Cost incCost;

                /** \brief The set of motions descending from the current motion */
                std::vector<Motion *> children;

                std::vector<std::pair<Motion *, bool>> nbh;

                /** \brief Handle to identify the motion in the queue */
                BinaryHeap<Motion *, MotionCompare>::Element *handle{nullptr};
            };

            /** \brief Compute distance between motions (actually distance between contained states) */
            double distanceFunction(const Motion *a, const Motion *b) const
            {
                return si_->distance(a->state, b->state);
            }

            double distanceFunction(const base::SafetyCertificate *a, const base::SafetyCertificate *b) const
            {
                return si_->distance(a->state, b->state);
            }

            /** \brief Information attached to growing a tree of motions (used internally) */
            struct TreeGrowingInfo
            {
                base::State *xstate;
                Motion *xmotion;
                bool start;
            };

            /** \brief The state of the tree after an attempt to extend it */
            enum GrowState
            {
                /// no progress has been made
                TRAPPED,
                /// progress has been made towards the randomly sampled state
                ADVANCED,
                /// the randomly sampled state was reached
                REACHED
            };

            /** \brief A nearest-neighbor datastructure representing a tree of motions */
            using TreeData = std::shared_ptr<NearestNeighbors<Motion *>>;

            /** feasible */
            GrowState growTree(TreeData &tree, TreeGrowingInfo &tgi, Motion *rmotion, bool &checkConnection, bool &otherSide);

            bool growCurrentTree(const base::State *state) const;

            bool growStartTree(const base::State *state) const;

            double penetrationDistance(const base::State *nstate, const base::State *state, bool start) const;

            bool rewireTree(BinaryHeap<Motion *, MotionCompare> &bh, Motion *m, bool start);

            void updateQueue(BinaryHeap<Motion *, MotionCompare> &bh, Motion *m);

            void updateLeafQueue(BinaryHeap<Motion *, MotionCompare> &bh, Motion *motion);

            bool isPathValid(Motion *motion, Motion *otherMotion);

            bool isPathValid(Motion *motion, bool start);

            bool isStateValid(Motion *motion, bool start);

            bool backPathRewireMotion(Motion *motion, bool start);

            bool backStateRewireMotion(Motion *motion, bool start);

            void removeInvalidMotions(TreeData &tree, Motion *motion, bool start);

            bool checkIfIn(const std::vector<Motion *> &motions, Motion *motion, unsigned int &ind) const;

            void connectToPmotion(Motion *motion, Motion *pmotion) const;

            // check 
            bool isValid(const base::State *state);

            bool checkInterMotion(const Motion *motion1, const Motion *motion2);

            // check
            bool isValid(Motion *motion);

            bool checkStartMotion(Motion *motion1, Motion *motion2);

            bool checkGoalMotion(Motion *motion1, Motion *motion2);

            bool checkTreeInternal(TreeData &tree, TreeGrowingInfo &tgi, Motion *nmotion, Motion *gmotion);

            std::size_t getNeighbors(const TreeData &tree, Motion *motion);

            void insertNeighbor(Motion *pmotion, Motion *motion);

            /** \brief Removes the given motion from the parent's child list */
            void removeFromParent(Motion *m);

            void removeFromNb(Motion *motion);

            void removeFromNb(Motion *pmotion, Motion *motion);

            bool removeFromNbSingleSide(Motion *pmotion, Motion *motion);

            void setMotionValid(Motion *pmotion, Motion *motion);

            /** \brief Updates the cost of the children of this node if the cost up to this node has changed */
            void updateChildCosts(Motion *m) const;

            void setMotionInfinityCost(Motion *m) const;

            /** \brief Create the samplers */
            base::AdInformedSamplerPtr allocInfSampler(const base::State *s1, const base::State *s2,
                                                       const base::Cost &minCost, const base::Cost &maxCost);

            void clearStartAdInfSampler() 
            {
                if (!startAdInfSampler_.empty())
                {
                    for (auto & sampler : startAdInfSampler_)
                        sampler.reset();
                    startAdInfSampler_.clear();

                    startAdInfPdf_.clear();
                    startAdElems_.clear();
                }
            }

            void clearGoalAdInfSampler() 
            {
                if (!goalAdInfSampler_.empty())
                {
                    for (auto & sampler : goalAdInfSampler_)
                        sampler.reset();
                    goalAdInfSampler_.clear();

                    goalAdInfPdf_.clear();
                    goalAdElems_.clear();
                }
            }

            bool localInfeasible(int &tree);

            void calculateInfSampler(bool local, bool start, bool &updated);

            void startInfSampler(bool local, std::vector<base::AdInformedSamplerPtr> &infSamplers);

            void startLocalInfSampler(std::vector<base::AdInformedSamplerPtr> &infSamplers);

            void goalInfSampler(bool local, std::vector<base::AdInformedSamplerPtr> &infSamplers);

            void goalLocalInfSampler(std::vector<base::AdInformedSamplerPtr> &infSamplers);

            using NumPdf = PDF<std::size_t>;
            using NumElem = NumPdf::Element;

            void calculateInfProb(bool update);

            void calculateInfProb(const std::vector<base::AdInformedSamplerPtr> &startInfSamplers, 
                                  const std::vector<base::AdInformedSamplerPtr> &goalInfSamplers,
                                  NumPdf &startInfPdf, NumPdf &goalInfPdf, 
                                  std::vector<NumElem *> &startelems, std::vector<NumElem *> &goalelems, bool update);

            double localRatio_{0.75};

            /** \brief Generate a sample */
            bool sampleUniform(base::State *state, bool start);

            bool sampleUniform(base::State *state, const std::vector<base::AdInformedSamplerPtr> &infSamplers, const NumPdf &adInfPdf);

            /** \brief Free the memory allocated by this planner */
            void freeMemory();

            base::StateSamplerPtr sampler_;

            std::vector<base::AdInformedSamplerPtr> startAdInfSampler_;

            std::vector<base::AdInformedSamplerPtr> goalAdInfSampler_;

            NumPdf startAdInfPdf_;
            std::vector<NumElem *> startAdElems_;

            NumPdf goalAdInfPdf_;
            std::vector<NumElem *> goalAdElems_;

            double startAdInfProb_{-1.0};

            /** \brief The start tree */
            TreeData tStart_;

            /** \brief The goal tree */
            TreeData tGoal_;

            int tree_{-1};

            std::vector<Motion *> pnullStartMotions_;

            std::vector<Motion *> pnullGoalMotions_;

            std::vector<Motion *> infeasibleStartPath_;

            std::vector<Motion *> infeasibleGoalPath_;

            RNG rng_;

            double maxDistance_{0.};

            double maxCollisionDistance_{0.};

            double penDistance_{0.0};

            double factor_{1.3};

            bool sortedK_{true};

            unsigned int nearestK_{5};

            unsigned int batch_{10};

            /** \brief Option to use informed sampling */
            bool useInformedSampling_{false};

            /** \brief The status of the sample rejection parameter. */
            bool useRejectionSampling_{false};

            /** \brief The number of attempts to make at informed sampling */
            unsigned int numSampleAttempts_{100u};

            /** \brief Objective we're optimizing */
            base::OptimizationObjectivePtr opt_;

            /** \brief Stores the start states as Motions. */
            std::vector<Motion *> startMotions_;

            /** \brief A list of states in the tree that satisfy the goal condition */
            std::vector<Motion *> goalMotions_;

            /** \brief The pair of motions in each tree connected during planning. */
            std::vector<std::pair<Motion *, Motion *>> connectionPoint_;

            struct MotionInfo;

            using GridCell = Grid<MotionInfo>::Cell;

            using CellPDF = PDF<GridCell *>;

            struct MotionInfo
            {
                Motion *operator[](unsigned int i)
                {
                    return motions_[i];
                }
                std::vector<Motion *>::iterator begin()
                {
                    return motions_.begin();
                }
                std::vector<Motion *>::iterator end()
                {
                    return motions_.end();
                }
                std::vector<Motion *>::iterator erase(std::vector<Motion *>::iterator iter)
                {
                    std::vector<Motion *>::iterator it = motions_.erase(iter);
                    return it;
                }
                void push_back(Motion *m)
                {
                    motions_.push_back(m);
                }
                unsigned int size() const
                {
                    return motions_.size();
                }
                bool empty() const
                {
                    return motions_.empty();
                }

                std::vector<Motion *> motions_;
                CellPDF::Element *elem_;
            };

            /** \brief Representation of a search tree. Two instances will be used. One for start and one for goal */
            struct MotionPDF
            {
                MotionPDF() = default;

                /** \brief The grid of motions corresponding to this tree */
                Grid<MotionInfo> grid{0};

                /** \brief The number of motions (in total) from the tree */
                unsigned int size{0};

                /** \brief The PDF used for selecting a cell from which to sample a motion */
                CellPDF pdf;
            };

            MotionPDF startPdf_, goalPdf_;

            void addPdfMotion(MotionPDF &pdf, Motion *motion, bool start);

            Motion *selectPdfMotion(MotionPDF &pdf, GridCell *&cell, bool start);

            void removePdfMotion(MotionPDF &pdf, Motion *motion);

            base::ProjectionEvaluatorPtr projectionEvaluator_;

            double startProb_{1.0}, goalProb_{1.0};

            bool startRemove_{false}, goalRemove_{false};

            Motion *bestStartMotion_{nullptr};

            Motion *bestGoalMotion_{nullptr};

			/** \brief A nearest-neighbors datastructure containing the obstacle certificate */
            std::shared_ptr<NearestNeighbors<base::SafetyCertificate *>> onn_;

            CollisionCertificateChecker collisionCertificateChecker_;

            bool lazyNode_{false};

            MotionCompare mc_;

            BinaryHeap<Motion *, MotionCompare> bh_;

            double oTime_{0.0};

            unsigned int oscNum_{20};

            std::ofstream ofsellipse;

        private:
            bool symmetric_;
        };
    }
}

#endif
