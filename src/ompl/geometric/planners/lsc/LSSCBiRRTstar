/*********************************************************************
* Software License Agreement (BSD License)
*
*  Copyright (c) 2011, Rice University
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions
*  are met:
*
*   * Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above
*     copyright notice, this list of conditions and the following
*     disclaimer in the documentation and/or other materials provided
*     with the distribution.
*   * Neither the name of the Rice University nor the names of its
*     contributors may be used to endorse or promote products derived
*     from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*********************************************************************/

/* Authors: Shi Shenglei*/

#ifndef OMPL_GEOMETRIC_PLANNERS_LSC_LSSCBiRRTstar_
#define OMPL_GEOMETRIC_PLANNERS_LSC_LSSCBiRRTstar_

#include <ompl/datastructures/BinaryHeap.h>
#include "ompl/datastructures/NearestNeighbors.h"
#include "ompl/geometric/planners/PlannerIncludes.h"
#include "ompl/base/samplers/AdInformedStateSampler.h"
#include "ompl/base/OptimizationObjective.h"

#include "ompl/base/SafetyCertificate.h"
#include "ompl/base/State.h"

#include "ompl/base/ProjectionEvaluator.h"
#include "ompl/datastructures/Grid.h"
#include "ompl/datastructures/PDF.h"

#include <functional>
#include <limits>
#include <vector>
#include <queue>
#include <deque>
#include <utility>
#include <list>

namespace ompl
{
    namespace geometric
    {
        /** \brief Bidirectional Optimal Rapidly-exploring Random Trees */
        class LSSCBiRRTstar : public base::Planner
        {
        public:
            using CollisionCertificateChecker = std::function<void(const base::State *state,  
                                                                const std::vector<base::SafetyCertificate *> &ocv, 
                                                                bool &osc,
                                                                base::SafetyCertificate *&csc)>;

            LSSCBiRRTstar(const base::SpaceInformationPtr &si, const CollisionCertificateChecker &collisionCertificateChecker);

            ~LSSCBiRRTstar() override;

            void setup() override;

            base::PlannerStatus solve(const base::PlannerTerminationCondition &ptc) override;

            void clear() override;

            void getPlannerData(base::PlannerData &data) const override;

            void setRange(double distance)
            {
                maxDistance_ = distance;
            }

            /** \brief Get the range the planner is using */
            double getRange() const
            {
                return maxDistance_;
            }

            void setCollisionDistance(double distance)
            {
                maxCollisionDistance_ = distance;
            }

            /** \brief Get the range the planner is using */
            double getCollisionDistance() const
            {
                return maxCollisionDistance_;
            }

            void setPenDistance(double distance)
            {
                penDistance_ = distance;
            }

            /** \brief Get the range the planner is using */
            double getPenDistance() const
            {
                return penDistance_;
            }

            void setLazyNode(bool lazy)
            {
                lazyNode_ = lazy;
            }

            bool getLazyNode() const
            {
                return lazyNode_;
            }

            void setRewireFactor(double rewireFactor)
            {
                rewireFactor_ = rewireFactor;
                calculateRewiringLowerBounds();
            }

            /** \brief Set the rewiring scale factor, s, such that r_rrg = s \times r_rrg* > r_rrg* (or k_rrg = s \times
             * k_rrg* > k_rrg*) */
            double getRewireFactor() const
            {
                return rewireFactor_;
            }

            void setPruneThreshold(const double pp)
            {
                pruneThreshold_ = pp;
            }

            /** \brief Get the current prune states percentage threshold parameter. */
            double getPruneThreshold() const
            {
                return pruneThreshold_;
            }

            /** \brief Use direct sampling of the heuristic for the generation of random samples (e.g., x_rand).
               If a direct sampling method is not defined for the objective, rejection sampling will be used by default. */
            void setInformedSampling(bool informedSampling)
            {
                useInformedSampling_ = informedSampling;
            }

            /** \brief Get the state direct heuristic sampling */
            bool getInformedSampling() const
            {
                return useInformedSampling_;
            }

            /** \brief Controls whether heuristic rejection is used on samples (e.g., x_rand) */
            void setSampleRejection(bool reject)
            {
                useRejectionSampling_ = reject;
            }

            /** \brief Get the state of the sample rejection option */
            bool getSampleRejection() const
            {
                return useRejectionSampling_;
            }

            void setKNearest(bool useKNearest)
            {
                useKNearest_ = useKNearest;
            }

            /** \brief Get the state of using a k-nearest search for rewiring. */
            bool getKNearest() const
            {
                return useKNearest_;
            }

            /** \brief Set the number of attempts to make while performing rejection or informed sampling */
            void setNumSamplingAttempts(unsigned int numAttempts)
            {
                numSampleAttempts_ = numAttempts;
            }

            /** \brief Get the number of attempts to make while performing rejection or informed sampling */
            unsigned int getNumSamplingAttempts() const
            {
                return numSampleAttempts_;
            }

            unsigned int numIterations() const
            {
                return iterations_;
            }

            ompl::base::Cost bestCost() const
            {
                return bestCost_;
            }

        protected:

            class Motion;

            enum StateValid
            {
                UnCkecked,
                InValid,
                Valid 
            };

            struct MotionCompare
            {
                MotionCompare(base::OptimizationObjectivePtr opt) : opt_(std::move(opt))
                {
                }

                /** \brief Ordering of motions */
                inline bool operator()(Motion *motion1, Motion *motion2) const
                {
                    // we use a max heap, to do a min heap so the operator < returns > in order to make it a min heap
                    return opt_->isCostBetterThan(motion1->cost, motion2->cost);
                }

                /** \brief Pointer to the Optimization Objective */
                base::OptimizationObjectivePtr opt_;
            };

            /** \brief Representation of a motion */
            class Motion
            {
            public:
                Motion(const base::SpaceInformationPtr &si) : state(si->allocState())
                {
                }

                ~Motion() = default;

                /** \brief The state contained by the motion */
                base::State *state{nullptr};

                const base::State *root{nullptr};

                /** \brief The parent motion in the exploration tree */
                Motion *parent{nullptr};

                StateValid stateValid{UnCkecked};

                bool valid{false};

                bool inConnection{false};

                bool middle{false};

                /** \brief The cost up to this motion */
                base::Cost cost;

                /** \brief The incremental cost of this motion's parent to this motion (this is stored to save distance
                 * computations in the updateChildCosts() method) */
                base::Cost incCost;

                /** \brief The set of motions descending from the current motion */
                std::vector<Motion *> children;

                std::vector<std::pair<Motion *, bool>> nbh;

                std::vector<Motion *> invalidnbh;

                /** \brief Handle to identify the motion in the queue */
                BinaryHeap<Motion *, MotionCompare>::Element *handle{nullptr};
            };

            /** \brief Compute distance between motions (actually distance between contained states) */
            double distanceFunction(const Motion *a, const Motion *b) const
            {
                return si_->distance(a->state, b->state);
            }

            double distanceFunction(const base::SafetyCertificate *a, const base::SafetyCertificate *b) const
            {
                return si_->distance(a->state, b->state);
            }

            /** \brief Information attached to growing a tree of motions (used internally) */
            struct TreeGrowingInfo
            {
                base::State *xstate;
                Motion *xmotion;
                bool start;
            };

            /** \brief The state of the tree after an attempt to extend it */
            enum GrowState
            {
                /// no progress has been made
                TRAPPED,
                /// progress has been made towards the randomly sampled state
                ADVANCED,
                /// the randomly sampled state was reached
                REACHED
            };

            struct CostMotionCompare // todo 
            {
                CostMotionCompare(Motion *motion, base::OptimizationObjectivePtr opt)
                  : motion_(motion), opt_(std::move(opt))
                {
                }
                inline bool operator()(std::pair<Motion *, unsigned int> motion1, std::pair<Motion *, unsigned int> motion2)
                {
                    base::Cost cost1 = opt_->combineCosts(motion1.first->cost, opt_->motionCost(motion1.first->state, motion_->state));
                    base::Cost cost2 = opt_->combineCosts(motion2.first->cost, opt_->motionCost(motion2.first->state, motion_->state));

                    bool low = false;
                    if (opt_->isCostBetterThan(cost1, cost2))
                        low = true;
                    else if (opt_->isFinite(cost1) && !opt_->isCostBetterThan(cost2, cost1))
                    {
                        if (opt_->isCostBetterThan(motion2.first->cost, motion1.first->cost))
                            low = true;
                    }

                    return low;
                }
                Motion *motion_;
                base::OptimizationObjectivePtr opt_;
            };

            /** \brief A nearest-neighbor datastructure representing a tree of motions */
            using TreeData = std::shared_ptr<NearestNeighbors<Motion *>>;

            /** feasible */
            GrowState growTree(TreeData &tree, TreeGrowingInfo &tgi, Motion *rmotion, bool &checkConnection, bool &otherSide);

            bool growCurrentTree(const base::State *state) const;

            bool growStartTree(const base::State *state) const;

            double penetrationDistance(base::State *nstate, base::State *state, bool start) const;

            bool rewireTree(BinaryHeap<Motion *, MotionCompare> &bh, Motion *m, bool start);

            void backRewire(BinaryHeap<Motion *, MotionCompare> &bh, Motion *motion, Motion *nb);

            void updateQueue(BinaryHeap<Motion *, MotionCompare> &bh, Motion *m);

            void updateLeafQueue(BinaryHeap<Motion *, MotionCompare> &bh, Motion *motion);

            bool isPathValid(Motion *motion, Motion *otherMotion);

            bool isPathValid(Motion *motion, bool start);

            bool isStateValid(Motion *motion, bool start);

            bool backPathRewireMotion(Motion *motion, bool start);

            bool backStateRewireMotion(Motion *motion, bool start);

            void removeInvalidMotions(TreeData &tree, Motion *motion, bool start);

            bool checkIfChild(Motion *motion, Motion *check) const;

            bool checkIfIn(std::vector<Motion *> motions, Motion *motion, unsigned int &ind) const;

            void connectToPmotion(Motion *motion, Motion *pmotion) const;

            // check 
            bool isValid(const base::State *state);

            bool checkInterMotion(Motion *motion1, Motion *motion2);

            // check
            bool isValid(Motion *motion);

            bool checkStartMotion(Motion *motion1, Motion *motion2);

            bool checkGoalMotion(Motion *motion1, Motion *motion2);

            bool checkTreeInternal(TreeData &tree, TreeGrowingInfo &tgi, Motion *nmotion, Motion *gmotion);

            std::size_t getNeighbors(const TreeData &tree, Motion *motion, bool start);

            void insertNeighbor(Motion *pmotion, Motion *motion);

            void removeMotion(Motion *motion, bool start);

            /** \brief Removes the given motion from the parent's child list */
            void removeFromParent(Motion *m);

            void removeFromNb(Motion *motion);

            void removeFromNb(Motion *pmotion, Motion *motion);

            bool removeFromNbSingleSide(Motion *pmotion, Motion *motion);

            void removeFromInvalidNb(Motion *motion);

            bool removeFromInvalidNbSingleSide(Motion *pmotion, Motion *motion);

            void setMotionValid(Motion *pmotion, Motion *motion);

            /** \brief Updates the cost of the children of this node if the cost up to this node has changed */
            void updateChildCosts(Motion *m) const;

            void setMotionInfinityCost(Motion *m) const;

            /** \brief Prunes all those states which estimated total cost is higher than pruneTreeCost.
                Returns the number of motions pruned. Depends on the parameter set by
               setPruneStatesImprovementThreshold() */
            int pruneTree(const base::Cost &pruneTreeCost);

            int pruneSingleTree(TreeData &tree, bool start, const base::Cost &pruneTreeCost,
                                const std::vector<Motion *> &rootMotions);

            int pruneTreeInternal(TreeData &tree, bool start, const base::Cost &pruneTreeCost,
                                    std::queue<Motion *, std::deque<Motion *>> &motionQueue);

            void addMotionChildrenToTree(TreeData &tree, Motion *motion);

            /** \brief Add the children of a vertex to the given list. */
            void addChildrenToList(std::queue<Motion *, std::deque<Motion *>> *motionList, Motion *motion);

            /** \brief Check whether the given motion passes the specified cost threshold, meaning it will be \e kept
             * during pruning */
            bool keepCondition(Motion *motion, const base::Cost &threshold, bool start);

            bool keepCondition2(Motion *motion, const base::Cost &threshold, bool start);

            /** \brief Computes the solution cost heuristically as the cost to come from start to the motion plus
                 the cost to go from the motion to the goal. If the parameter \e use_admissible_heuristic
                 (\e setAdmissibleCostToCome()) is true, a heuristic estimate of the cost to come is used;
                 otherwise, the current cost to come to the motion is used (which may overestimate the cost
                 through the motion). */
            base::Cost solutionHeuristic2(Motion *motion, bool start) const;

            base::Cost bordersolutionHeuristic(Motion *motion, bool start) const;

            std::size_t calculateInfVertexNum(bool start);

            using NumPdf = PDF<unsigned int>;
            using NumElem = NumPdf::Element;

            void calculateInfProb();

            void calculateInfProb(const std::vector<base::AdInformedSamplerPtr> &startInfSamplers, 
                                  const std::vector<base::AdInformedSamplerPtr> &goalInfSamplers,
                                  NumPdf &startInfPdf, NumPdf &goalInfPdf, 
                                  std::vector<NumElem *> &startelems, std::vector<NumElem *> &goalelems);

            /** \brief Create the samplers */
            base::AdInformedSamplerPtr allocInfSampler(const base::State *s1, const base::State *s2,
                                                       const base::Cost &minCost, const base::Cost &maxCost);

            void adjustInfSampler(const Motion *motion1, const Motion *motion2, std::vector<base::AdInformedSamplerPtr> &infSamplers, unsigned int localseg = 0);

            /** \brief Generate a sample */
            bool sampleUniform(base::State *state, bool start);

            bool sampleUniform(base::State *state, const std::vector<base::AdInformedSamplerPtr> &infSamplers, const NumPdf &adInfPdf);

            /** \brief Free the memory allocated by this planner */
            void freeMemory();

            void clearStartInfSampler() 
            {
                if (!startInfSampler_.empty())
                {
                    for (auto & sampler : startInfSampler_)
                        sampler.reset();
                    startInfSampler_.clear();

                    startInfPdf_.clear();
                    startElems_.clear();
                }
            }

            void clearGoalInfSampler() 
            {
                if (!goalInfSampler_.empty())
                {
                    for (auto & sampler : goalInfSampler_)
                        sampler.reset();
                    goalInfSampler_.clear();

                    goalInfPdf_.clear();
                    goalElems_.clear();
                }
            }

            base::StateSamplerPtr sampler_;

            std::vector<base::AdInformedSamplerPtr> startInfSampler_;

            std::vector<base::AdInformedSamplerPtr> goalInfSampler_;

            NumPdf startInfPdf_;
            std::vector<NumElem *> startElems_;

            NumPdf goalInfPdf_;
            std::vector<NumElem *> goalElems_;

            double startInfProb_{-1.};

            bool guniform_{true};

            /** \brief Calculate the k_RRG* and r_RRG* terms */
            void calculateRewiringLowerBounds();

            /** \brief Calculate the rrg_r_ and rrg_k_ terms */
            void calculateRRG(bool start);

            /** \brief The start tree */
            TreeData tStart_;

            /** \brief The goal tree */
            TreeData tGoal_;

            std::vector<Motion *> pnullStartMotions_;

            std::vector<Motion *> pnullGoalMotions_;

            RNG rng_;

            double maxDistance_{0.};

            double maxCollisionDistance_{0.};

            double penDistance_{0.0};

            double startPrunedMeasure_{0.0}, goalPrunedMeasure_{0.0};

            std::size_t startVertexNum_{0}, goalVertexNum_{0};

            /** \brief Option to use k-nearest search for rewiring */
            bool useKNearest_{true};

            bool sortedK_{true};

            /** \brief The rewiring factor, s, so that r_rrt = s \times r_rrt* > r_rrt* (or k_rrt = s \times k_rrt* >
             * k_rrt*) */
            double rewireFactor_{1.1};

            /** \brief A constant for k-nearest rewiring calculations */
            double k_rrt_{0u};

            /** \brief A constant for r-disc rewiring calculations */
            double s_r_rrt_{0.}, g_r_rrt_{0.};

            double s_rrg_r_{0.}, g_rrg_r_{0.};

            /** \brief Current value of the number of neighbors used */
            unsigned int rrg_k_{0};

            /** \brief The tree is pruned when the change in solution cost is greater than this fraction. */
            double pruneThreshold_{.05};

            /** \brief Option to use informed sampling */
            bool useInformedSampling_{false};

            /** \brief The status of the sample rejection parameter. */
            bool useRejectionSampling_{false};

            /** \brief The number of attempts to make at informed sampling */
            unsigned int numSampleAttempts_{100u};

            /** \brief Best cost found so far by algorithm */
            base::Cost bestCost_{std::numeric_limits<double>::quiet_NaN()};

            /** \brief The cost at which the graph was last pruned */
            base::Cost prunedCost_{std::numeric_limits<double>::quiet_NaN()};

            /** \brief Objective we're optimizing */
            base::OptimizationObjectivePtr opt_;

            /** \brief Stores the start states as Motions. */
            std::vector<Motion *> startMotions_;

            /** \brief A list of states in the tree that satisfy the goal condition */
            std::vector<Motion *> goalMotions_;

            /** \brief The pair of motions in each tree connected during planning. */
            std::vector<std::pair<Motion *, Motion *>> connectionPoint_;

            struct MotionInfo;

            using GridCell = Grid<MotionInfo>::Cell;

            using CellPDF = PDF<GridCell *>;

            struct MotionInfo
            {
                Motion *operator[](unsigned int i)
                {
                    return motions_[i];
                }
                std::vector<Motion *>::iterator begin()
                {
                    return motions_.begin();
                }
                std::vector<Motion *>::iterator end()
                {
                    return motions_.end();
                }
                std::vector<Motion *>::iterator erase(std::vector<Motion *>::iterator iter)
                {
                    std::vector<Motion *>::iterator it = motions_.erase(iter);
                    return it;
                }
                void push_back(Motion *m)
                {
                    motions_.push_back(m);
                }
                unsigned int size() const
                {
                    return motions_.size();
                }
                bool empty() const
                {
                    return motions_.empty();
                }

                std::vector<Motion *> motions_;
                CellPDF::Element *elem_;
            };

            /** \brief Representation of a search tree. Two instances will be used. One for start and one for goal */
            struct MotionPDF
            {
                MotionPDF() = default;

                /** \brief The grid of motions corresponding to this tree */
                Grid<MotionInfo> grid{0};

                /** \brief The number of motions (in total) from the tree */
                unsigned int size{0};

                /** \brief The PDF used for selecting a cell from which to sample a motion */
                CellPDF pdf;
            };

            MotionPDF startPdf_, goalPdf_;

            void addPdfMotion(MotionPDF &pdf, Motion *motion, bool start);

            Motion *selectPdfMotion(MotionPDF &pdf, GridCell *&cell, bool start);

            void removePdfMotion(MotionPDF &pdf, Motion *motion);

            base::ProjectionEvaluatorPtr projectionEvaluator_;

            double startProb_{1.0}, goalProb_{1.0};

            bool solved_{false};

            bool startRemove_{false}, goalRemove_{false};

            Motion *bestStartMotion_{nullptr};

            Motion *bestGoalMotion_{nullptr};

			/** \brief A nearest-neighbors datastructure containing the obstacle certificate */
            std::shared_ptr<NearestNeighbors<base::SafetyCertificate *>> onn_;

            CollisionCertificateChecker collisionCertificateChecker_;

            bool lazyNode_{false};

            MotionCompare mc_;

            BinaryHeap<Motion *, MotionCompare> bh_;

            unsigned int oscNum_{20};

            unsigned int iterations_{0u};

            std::string numIterationsProperty() const
            {
                return std::to_string(numIterations());
            }
            std::string bestCostProperty() const
            {
                return std::to_string(bestCost().value());
            }
            std::string collisionCheckTimeProperty() const
            {
                return std::to_string(oTime_);
            }
            std::string nearSearchProperty() const
            {
                return std::to_string(nearNbTime_);
            }

            double oTime_{0};

            double interTime_{0};

            double growTime_{0};

            double pathTime_{0};

            double nearNbTime_{0};

            unsigned int numStates_{0};

            unsigned int lazyo_{0};

        private:
            bool symmetric_;
        };
    }
}

#endif
